{
  "README.html": {
    "href": "README.html",
    "title": "DrawnUi Documentation | DrawnUi Documentation",
    "summary": "DrawnUi Documentation This folder contains the DocFX-based documentation for DrawnUi. Building the Documentation Option 1: Using .NET Tool (Recommended) To build the documentation locally: Install DocFX as a .NET global tool: dotnet tool install -g docfx Navigate to the docs folder: cd docs Build the documentation: docfx build Preview the documentation: docfx serve _site Option 2: Using Docker If you don't have .NET installed, you can use Docker: # From the repository root docker run --rm -it -v ${PWD}:/app -w /app/docs mcr.microsoft.com/dotnet/sdk:7.0 bash -c \"dotnet tool install -g docfx && docfx build\" Option 3: Using NPM Package (Alternative) For environments where .NET isn't available: Install docfx via npm: npm install -g @tsgkadot/docfx-flavored-markdown Build the documentation: dfm build Documentation Structure /api/: Auto-generated API documentation from XML comments /articles/: Conceptual documentation articles and tutorials /images/: Images used in the documentation /templates/: DocFX templates for styling Contributing to the Documentation When contributing to the documentation: For API documentation, add XML comments to the code in the DrawnUi source files For conceptual documentation, edit or create Markdown files in the /articles/ folder After making changes, build the documentation to verify it renders correctly API Documentation Guidelines When adding XML comments to your code: Use the <summary> tag to provide a brief description of the class/method/property Use the <param> tag to document parameters Use the <returns> tag to document return values Use the <example> tag to provide usage examples Use <see cref=\"...\"/> to create links to other types/members"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation | DrawnUi Documentation",
    "summary": "API Documentation This section contains the API documentation for DrawnUi, automatically generated from the code comments. Main Namespaces DrawnUi.Draw: Core drawing and rendering functionality DrawnUi.Controls: UI controls and components DrawnUi.Features: Additional features and capabilities Core Components The main components you'll interact with include: SkiaControl: Base class for all drawn controls SkiaShape: Basic shape rendering SkiaLabel: Text rendering with advanced formatting options SkiaLayout: Layout management for drawn elements SkiaButton, SkiaSwitch, SkiaCheckbox: Platform-styled UI controls"
  },
  "articles/advanced/platform-styling.html": {
    "href": "articles/advanced/platform-styling.html",
    "title": "Platform-Specific Styling | DrawnUi Documentation",
    "summary": "Platform-Specific Styling DrawnUi controls support platform-specific styling to ensure your app looks and feels native on each platform. Using Platform Styles The ControlStyle Property Many DrawnUi controls include a ControlStyle property that determines their visual appearance: Unset: Default styling defined by the control Platform: Automatically selects the appropriate style for the current platform Cupertino: iOS-style appearance Material: Android Material Design appearance Windows: Windows-style appearance Basic Usage <!-- Automatically use the platform-specific style --> <draw:SkiaButton Text=\"Platform Button\" ControlStyle=\"Platform\" /> <!-- Explicitly use iOS style on any platform --> <draw:SkiaSwitch ControlStyle=\"Cupertino\" IsToggled=\"true\" /> Supported Controls The following controls support platform-specific styling: SkiaButton: Different button appearances across platforms SkiaSwitch: Toggle switches with platform-specific track and thumb styling SkiaCheckbox: Checkbox controls with platform-appropriate checkmarks and animations Platform Style Characteristics Cupertino (iOS) Style Rounded corners and subtle shadows Blue accent color (#007AFF) Switches have pill-shaped tracks with shadows on the thumb Buttons typically have semibold text Material (Android) Style Less rounded corners More pronounced shadows Material blue accent color (#2196F3) Switches have track colors that match the thumb when active Buttons often use uppercase text Windows Style Minimal corner radius Subtle shadows Windows blue accent color (#0078D7) Switches and buttons have a more squared appearance Customizing Platform Styles You can combine platform styles with custom styling. The platform style defines the base appearance, while your custom properties provide additional customization: <draw:SkiaButton Text=\"Custom Platform Button\" ControlStyle=\"Platform\" BackgroundColor=\"Purple\" TextColor=\"White\" /> This creates a button with the platform-specific shape, shadow, and behavior, but with your custom colors. Creating Custom Platform-Styled Controls If you're creating custom controls, you can leverage the same platform styling system: public class MyCustomControl : SkiaControl { public static readonly BindableProperty ControlStyleProperty = BindableProperty.Create( nameof(ControlStyle), typeof(PrebuiltControlStyle), typeof(MyCustomControl), PrebuiltControlStyle.Unset); public PrebuiltControlStyle ControlStyle { get { return (PrebuiltControlStyle)GetValue(ControlStyleProperty); } set { SetValue(ControlStyleProperty, value); } } protected override void OnPropertyChanged(string propertyName = null) { base.OnPropertyChanged(propertyName); if (propertyName == nameof(ControlStyle)) { ApplyPlatformStyle(); } } private void ApplyPlatformStyle() { switch (ControlStyle) { case PrebuiltControlStyle.Cupertino: // Apply iOS-specific styling break; case PrebuiltControlStyle.Material: // Apply Material Design styling break; case PrebuiltControlStyle.Windows: // Apply Windows styling break; case PrebuiltControlStyle.Platform: #if IOS || MACCATALYST // Apply iOS styling #elif ANDROID // Apply Material styling #elif WINDOWS // Apply Windows styling #endif break; } } }"
  },
  "articles/controls/buttons.html": {
    "href": "articles/controls/buttons.html",
    "title": "Button Controls | DrawnUi Documentation",
    "summary": "Button Controls DrawnUi provides highly customizable button controls with platform-specific styling. SkiaButton SkiaButton is a versatile button control with support for different button styles and platform-specific appearance. Basic Usage <draw:SkiaButton Text=\"Click Me\" WidthRequest=\"120\" HeightRequest=\"40\" BackgroundColor=\"Blue\" TextColor=\"White\" CornerRadius=\"8\" Clicked=\"OnButtonClicked\" /> Button Style Types SkiaButton supports multiple style variants through the ButtonStyle property: Contained: Standard filled button with background color (default) Outlined: Button with outline border and transparent background Text: Button with no background or border, only text <draw:SkiaButton Text=\"Outlined Button\" ButtonStyle=\"Outlined\" BackgroundColor=\"Blue\" TextColor=\"Blue\" /> Platform-Specific Styling Set the ControlStyle property to apply platform-specific styling: Platform: Automatically selects the appropriate style for the current platform Cupertino: iOS-style button Material: Android Material Design button Windows: Windows-style button <draw:SkiaButton Text=\"iOS Style\" ControlStyle=\"Cupertino\" /> Elevation Buttons can have elevation (shadow) effects: <draw:SkiaButton Text=\"Elevated Button\" ElevationEnabled=\"True\" /> Properties Property Type Description Text string The text displayed on the button TextColor Color The color of the button text BackgroundColor Color The background color of the button CornerRadius float The corner radius of the button ButtonStyle ButtonStyleType The button style (Contained, Outlined, Text) ControlStyle PrebuiltControlStyle The platform-specific style ElevationEnabled bool Whether the button has a shadow effect TextCase TextTransform The text case transformation (None, Uppercase, Lowercase) Events Clicked: Raised when the button is clicked/tapped Pressed: Raised when the button is pressed down Released: Raised when the button is released"
  },
  "articles/controls/index.html": {
    "href": "articles/controls/index.html",
    "title": "Controls Overview | DrawnUi Documentation",
    "summary": "Controls Overview DrawnUi provides a comprehensive set of UI controls rendered with SkiaSharp for optimal performance. All controls support platform-specific styling and extensive customization options. Control Categories DrawnUi controls are organized into several categories: Button Controls SkiaButton: Standard button with platform-specific styling Custom button variants: Outlined, text-only, and other button styles Toggle Controls SkiaSwitch: Platform-styled toggle switch SkiaCheckbox: Platform-styled checkbox SkiaToggle: Base toggle class for custom toggles Layout Controls SkiaLayout: Base layout container GridLayout: Grid-based layout HStack/VStack: Horizontal and vertical stack layouts Text Controls SkiaLabel: High-performance text rendering SkiaMarkdownLabel: Markdown-capable text control Image Controls SkiaImage: High-performance image rendering SkiaSvg: SVG rendering SkiaGif: Animated GIF support"
  },
  "articles/controls/switches.html": {
    "href": "articles/controls/switches.html",
    "title": "Switches and Toggles | DrawnUi Documentation",
    "summary": "Switches and Toggles DrawnUi provides toggle controls with platform-specific styling, including switches and checkboxes. SkiaSwitch SkiaSwitch is a toggle control styled according to platform conventions, similar to an on/off switch. Basic Usage <draw:SkiaSwitch IsToggled=\"false\" WidthRequest=\"50\" HeightRequest=\"30\" ColorFrameOff=\"Gray\" ColorFrameOn=\"Green\" ColorThumbOff=\"White\" ColorThumbOn=\"White\" Toggled=\"OnSwitchToggled\" /> Platform-Specific Styling Set the ControlStyle property to apply platform-specific styling: Platform: Automatically selects the appropriate style for the current platform Cupertino: iOS-style switch with pill-shaped track Material: Android Material Design switch Windows: Windows-style switch <draw:SkiaSwitch ControlStyle=\"Cupertino\" IsToggled=\"true\" /> Properties Property Type Description IsToggled bool Whether the switch is toggled on or off ColorFrameOn Color The color of the track when toggled on ColorFrameOff Color The color of the track when toggled off ColorThumbOn Color The color of the thumb when toggled on ColorThumbOff Color The color of the thumb when toggled off ControlStyle PrebuiltControlStyle The platform-specific style IsAnimated bool Whether state changes are animated Events Toggled: Raised when the switch is toggled on or off SkiaCheckbox SkiaCheckbox is a toggle control styled as a checkbox with platform-specific appearance. Basic Usage <draw:SkiaCheckbox IsToggled=\"false\" WidthRequest=\"24\" HeightRequest=\"24\" ColorFrameOff=\"Gray\" ColorFrameOn=\"Blue\" ColorThumbOff=\"Transparent\" ColorThumbOn=\"White\" Toggled=\"OnCheckboxToggled\" /> Platform-Specific Styling Like SkiaSwitch, SkiaCheckbox supports platform-specific styling through the ControlStyle property. Properties SkiaCheckbox shares most properties with SkiaSwitch, both inheriting from SkiaToggle. SkiaToggle SkiaToggle is the base class for toggle controls. You can use it to create custom toggle controls with similar behavior to switches and checkboxes. Key Properties Property Type Description IsToggled bool Whether the control is toggled on or off DefaultValue bool The default toggle state ColorFrameOn/Off Color The color of the frame in each state ColorThumbOn/Off Color The color of the thumb in each state IsAnimated bool Whether state changes are animated Events Toggled: Raised when the toggle state changes"
  },
  "articles/getting-started.html": {
    "href": "articles/getting-started.html",
    "title": "Getting Started with DrawnUi | DrawnUi Documentation",
    "summary": "Getting Started with DrawnUi This guide will help you get started with DrawnUi in your .NET MAUI application. Installation 1. Add the NuGet Package Install the DrawnUi NuGet package in your .NET MAUI project: dotnet add package DrawnUi Or via the NuGet Package Manager in Visual Studio. 2. Initialize in Your MAUI App Update your MauiProgram.cs file to initialize DrawnUi: using DrawnUi; public static class MauiProgram { public static MauiApp CreateMauiApp() { var builder = MauiApp.CreateBuilder(); builder .UseMauiApp<App>() .UseDrawnUi() // Add this line .ConfigureFonts(fonts => { fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\"); fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\"); }); return builder.Build(); } } using DrawnUi Controls Add Namespace to XAML Add the DrawnUi namespace to your XAML files: <ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:draw=\"http://schemas.appomobi.com/drawnUi/2023/draw\" x:Class=\"YourNamespace.YourPage\"> <!-- Page content --> </ContentPage> using DrawnUi Controls Now you can add DrawnUi controls to your page: <draw:DrawnUiBasePage> <draw:SkiaLayout> <draw:SkiaLabel Text=\"Hello DrawnUi!\" FontSize=\"24\" HorizontalOptions=\"Center\" VerticalOptions=\"Center\" /> <draw:SkiaButton Text=\"Click Me\" WidthRequest=\"120\" HeightRequest=\"40\" CornerRadius=\"8\" BackgroundColor=\"Blue\" TextColor=\"White\" VerticalOptions=\"Center\" HorizontalOptions=\"Center\" Margin=\"0,50,0,0\" Clicked=\"OnButtonClicked\" /> </draw:SkiaLayout> </draw:DrawnUiBasePage> Handling Events Handle control events in your code-behind: private void OnButtonClicked(object sender, SkiaGesturesParameters e) { // Handle button click } Using Platform-Specific Styles DrawnUi controls support platform-specific styling: <draw:SkiaButton Text=\"Platform Style\" ControlStyle=\"Platform\" WidthRequest=\"150\" HeightRequest=\"40\" /> <draw:SkiaSwitch ControlStyle=\"Platform\" IsToggled=\"true\" Margin=\"0,20,0,0\" /> Next Steps Explore the Controls documentation to learn about available controls See Platform-Specific Styling for more styling options Check out the Sample Applications for complete examples"
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "Articles | DrawnUi Documentation",
    "summary": "Articles This section contains documentation articles and guides for using DrawnUi. Getting Started Installation and Setup Your First DrawnUi App Understanding the Drawing Pipeline Controls Overview Buttons Switches and Toggles Layout Controls Text and Labels Images Advanced Topics Performance Optimization Custom Controls Animation Platform-Specific Styling"
  },
  "index.html": {
    "href": "index.html",
    "title": "DrawnUi Documentation | DrawnUi Documentation",
    "summary": "DrawnUi Documentation Welcome to the DrawnUi documentation! This library provides high-performance UI controls for .NET MAUI applications using SkiaSharp. Getting Started DrawnUi is a powerful UI framework for .NET MAUI applications focusing on: High-performance rendering with SkiaSharp Platform-specific styling Customizable controls Advanced animation support Features SkiaSharp Rendering: All controls are rendered using SkiaSharp for maximum performance Platform Styling: Automatic styling based on the current platform (iOS, Android, Windows) Rich Controls: Buttons, switches, checkboxes, and more with full styling support Animation: Built-in animation capabilities for rich, interactive UIs Customization: Extensive customization options for all controls Installation dotnet add package DrawnUi Documentation Structure This documentation is organized into the following sections: Getting Started: Quick start guide and installation Controls: Detailed documentation for each control API Reference: Complete API documentation Samples: Example applications and code snippets"
  }
}